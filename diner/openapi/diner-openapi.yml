openapi: 3.0.1
info:
  title: Diner REST API
  description: Diner REST API.
  termsOfService: n/a
  contact:
    name: J-Tech
  license:
    name: DBAD
    url: https://dbad-license.org/
  version: V1
servers:
- url: //localhost:8080/
tags:
- name: menu-controller
  description: Menu Controller
- name: order-controller
  description: Order Controller
- name: serve-controller
  description: Serve order Controller
paths:
  /api/menu:
    get:
      tags:
      - menu-controller
      summary: get the menu
      operationId: getMenuUsingGET
      responses:
        200:
          description: Returns the list of possible Drinks or Food items that can
            be ordered.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
        404:
          description: If no menu is available
          content: {}
      deprecated: false
  /api/order:
    get:
      tags:
      - order-controller
      summary: get all orders
      operationId: getOrdersUsingGET
      responses:
        200:
          description: OK, returns all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - order-controller
      summary: place a new order
      operationId: placeOrderUsingPOST
      requestBody:
        description: the requested items food and drinks
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RequestedItem'
        required: true
      responses:
        200:
          description: OK, returns a reference to the created order, this can be used
            to pay the order or get the bill for the order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOrder'
        201:
          description: Created
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: requestedItems
  /api/order/{id}/bill:
    get:
      tags:
      - order-controller
      summary: get the bill for the order
      operationId: getBillUsingGET
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bill'
        404:
          description: Not Found
          content: {}
      deprecated: false
  /api/order/{id}/pay:
    post:
      tags:
      - order-controller
      summary: pay the order
      operationId: payUsingPOST
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /api/order/{id}/serve/dishes:
    post:
      tags:
      - serve-controller
      summary: serve the dishes for the order, this is called by the kitchen to indicate
        that a order can be served
      operationId: serveDishesUsingPOST
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /api/order/{id}/serve/drinks:
    post:
      tags:
      - serve-controller
      summary: serve the drinks for the order, this is called by the bar to indicate
        that drinks can be served
      operationId: serveDrinksUsingPOST
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
components:
  schemas:
    Bill:
      title: The Bill, with a total and a summary of the items billed. Use the payUrl
        as the url to pay this bill.
      type: object
      properties:
        payUrl:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/BillItem'
        total:
          type: integer
          format: int64
    BillItem:
      title: A single bill item
      type: object
      properties:
        name:
          type: string
        price:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
    MenuItem:
      title: A single menu item
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        price:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - DISH
          - DRINK
    Order:
      title: The Order as registered by the diner
      type: object
      properties:
        id:
          type: integer
          format: int64
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        status:
          type: string
          enum:
          - INITIAL
          - PREPARING
          - DRINK_SERVED
          - FOOD_SERVED
          - BILLING
          - PAYED
          - NO_CUSTOMER
    OrderItem:
      title: A single order item
      type: object
      properties:
        orderItemType:
          type: string
          enum:
          - DRINK
          - DISH
        prepared:
          type: boolean
        quantity:
          type: integer
          format: int64
        name:
          type: string
    RequestedItem:
      title: A requested item, these are the items that are being ordered as opposed
        to the items already ordered
      type: object
      properties:
        quantity:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
          enum:
          - DRINK
          - DISH
    ResponseOrder:
      title: The order reference of the created order, use the billUrl to get the
        bill of this order.
      type: object
      properties:
        billUrl:
          type: string
        orderid:
          type: integer
          format: int64
